{"ast":null,"code":"import ajax from \"ajax\";\nconst BASE_URL = 'https://randomuser.me';\nconst client = ajax.create({\n  baseURL: 'https://randomuser.me/api/'\n});\nclient.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  config.headers = {\n    Authorization: localStorage.getItem('contact_app_token')\n  };\n  return config;\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n});\nexport default class Api {\n  static registration(email, password) {\n    let auth = {\n      email,\n      password\n    };\n    let requestBody = JSON.stringify(auth);\n    return request(`${BASE_URL}/api/registration`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: requestBody\n    });\n  }\n  static login(email, password) {\n    const auth = {\n      email,\n      password\n    };\n    return request(`${BASE_URL}/api/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(auth)\n    });\n  }\n  static getAllContacts(token) {\n    // return request(`${BASE_URL}/api/contact`,{\n    //     headers: {\n    //         Authorization:token\n    //     }\n    // });\n    return client.get('contact');\n  }\n  static addContact(token, contact) {\n    return request(`${BASE_URL}/api/contact`, {\n      method: 'POST',\n      headers: {\n        Authorization: token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(contact)\n    });\n  }\n  static removeContactById(token, id) {\n    return request(`${BASE_URL}/api/contact/${id}`, {\n      method: 'DELETED',\n      headers: {\n        Authorization: token\n      }\n    });\n  }\n  static updateContact(token, contact) {\n    return request(`${BASE_URL}/api/contact`, {\n      method: 'PUT',\n      headers: {\n        Authorization: token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(contact)\n    });\n  }\n  static clearAll(token) {\n    return request(`${BASE_URL}/api/clear`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: token\n      }\n    });\n  }\n}\nfunction parseJSON(response) {\n  return new Promise(resolve => {\n    response.json().then(json => resolve({\n      status: response.status,\n      ok: response.ok,\n      json\n    }));\n  });\n}\nfunction request(url, options) {\n  return new Promise((resolve, reject) => {\n    fetch(url, options).then(parseJSON).then(response => {\n      if (response.ok) {\n        return resolve(response.json);\n      }\n      return reject(response.json);\n    }).catch(error => {\n      reject({\n        message: error.message\n      });\n    });\n  });\n}","map":{"version":3,"names":["ajax","BASE_URL","client","create","baseURL","interceptors","request","use","config","headers","Authorization","localStorage","getItem","error","Promise","reject","Api","registration","email","password","auth","requestBody","JSON","stringify","method","body","login","getAllContacts","token","get","addContact","contact","removeContactById","id","updateContact","clearAll","parseJSON","response","resolve","json","then","status","ok","url","options","fetch","catch","message"],"sources":["D:/My/Projects/#_React/demo_user_profile_management/src/services/api.js"],"sourcesContent":["import ajax from \"ajax\";\r\nconst BASE_URL = 'https://randomuser.me';\r\n\r\nconst client = ajax.create({\r\n    baseURL:'https://randomuser.me/api/'\r\n});\r\n\r\nclient.interceptors.request.use(function (config) {\r\n    // Do something before request is sent\r\n    config.headers = {\r\n        Authorization:localStorage.getItem('contact_app_token')\r\n    }\r\n    return config;\r\n}, function (error) {\r\n    // Do something with request error\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default class Api {\r\n    static registration(email, password) {\r\n        let auth = {email, password};\r\n        let requestBody = JSON.stringify(auth);\r\n\r\n        return request(`${BASE_URL}/api/registration`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: requestBody\r\n        });\r\n    }\r\n\r\n    static login(email,password){\r\n        const auth = {email,password};\r\n        return request(`${BASE_URL}/api/login`,{\r\n            method: 'POST',\r\n            headers :{\r\n                'Content-Type':'application/json'\r\n            },\r\n            body: JSON.stringify(auth)\r\n        });\r\n    }\r\n\r\n    static getAllContacts(token){\r\n        // return request(`${BASE_URL}/api/contact`,{\r\n        //     headers: {\r\n        //         Authorization:token\r\n        //     }\r\n        // });\r\n        return client.get('contact');\r\n    }\r\n\r\n    static addContact(token,contact){\r\n        return request(`${BASE_URL}/api/contact`,{\r\n            method:'POST',\r\n            headers:{\r\n                Authorization: token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body:JSON.stringify(contact)\r\n        });\r\n    }\r\n\r\n    static removeContactById(token, id){\r\n        return request(`${BASE_URL}/api/contact/${id}`,{\r\n            method:'DELETED',\r\n            headers:{\r\n                Authorization:token\r\n            }\r\n        });\r\n    }\r\n\r\n    static updateContact(token, contact){\r\n        return request(`${BASE_URL}/api/contact`,{\r\n            method:'PUT',\r\n            headers:{\r\n                Authorization:token,\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify(contact)\r\n        });\r\n    }\r\n\r\n    static clearAll(token){\r\n        return request(`${BASE_URL}/api/clear`,{\r\n            method:'DELETE',\r\n            headers:{\r\n                Authorization:token\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction parseJSON(response) {\r\n    return new Promise(resolve => {\r\n        response.json()\r\n            .then(json => resolve({\r\n                status: response.status,\r\n                ok: response.ok,\r\n                json\r\n            }));\r\n    });\r\n}\r\n\r\nfunction request(url, options) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(url, options)\r\n            .then(parseJSON)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return resolve(response.json);\r\n                }\r\n                return reject(response.json);\r\n            }).catch(error => {\r\n            reject({\r\n                message: error.message\r\n            });\r\n        });\r\n    });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}